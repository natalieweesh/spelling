{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","timer","useRef","textBox","newWordButton","useState","answer","setAnswer","submitted","setSubmitted","time","setTime","word","setWord","counting","setCounting","timesUp","setTimesUp","totalAnswered","setTotalAnswered","correctAnswered","setCorrectAnswered","speak","words","timeout","setTimeout","window","responsiveVoice","checkAnswer","trim","toLowerCase","useEffect","clearTimeout","current","focus","className","ref","disabled","onClick","e","rand","Math","floor","random","console","log","generateWord","onSubmit","preventDefault","length","type","value","onChange","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac4c3362.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport words from './words/words.json';\nimport './App.css';\n\nconst TOTAL = 178691;\n\nfunction App() {\n  const timer = useRef(null);\n  const textBox = useRef(null);\n  const newWordButton = useRef(null);\n  const [answer, setAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [time, setTime] = useState(0);\n  const [word, setWord] = useState('');\n  const [counting, setCounting] = useState(false);\n  const [timesUp, setTimesUp] = useState(false);\n  const [totalAnswered, setTotalAnswered] = useState(0);\n  const [correctAnswered, setCorrectAnswered] = useState(0);\n\n  const speak = (words, timeout = 0) => {\n    setTimeout(() => {\n      window.responsiveVoice.speak(words)\n    }, timeout)\n  }\n\n  const generateWord = () => {\n    const rand = Math.floor(Math.random() * TOTAL);\n    const word = words[rand];\n    setWord(word);\n    console.log('word', word);\n    setTime(30);\n    // setTime(5);\n    setCounting(true);\n    speak(word);\n  }\n\n  const checkAnswer = () => {\n    const correct = answer.trim().toLowerCase() === word;\n    return correct;\n  }\n\n  useEffect(() => {\n    if (counting) {\n      if (time === 0) {\n        setCounting(false);\n        clearTimeout(timer.current);\n        setTime(0);\n        setSubmitted(true);\n        setTimesUp(true);\n        setTotalAnswered(totalAnswered + 1);\n        if (checkAnswer()) {\n          setCorrectAnswered(correctAnswered + 1);\n        }\n        setTimeout(() => {\n          newWordButton.current.focus();\n        }, 50)\n      } else {\n        timer.current = setTimeout(() => {\n          setTime(time - 1);\n        }, 1000)\n      }\n    }\n  }, [time, counting])\n\n  return (\n    <div className=\"App-header\">\n      <header>\n        <p className=\"title\">Spelling Bee Practice!</p>\n        <p className=\"score\">Your score: {correctAnswered} / {totalAnswered}</p>\n      </header>\n      <div className=\"main\">\n        <div className=\"timerow\">\n          <div className=\"timesup\">{timesUp && 'time\\'s up'}</div>\n          {counting && <div className=\"time\">{time}</div>}\n        </div>\n        {!counting && <button ref={newWordButton} disabled={counting} onClick={(e) => {\n          generateWord();\n          setSubmitted(false);\n          setTimesUp(false);\n          setAnswer('');\n          textBox.current.focus();\n        }}>Gimme a word!</button>}\n        {counting && <button onClick={() => {\n          speak(word);\n          textBox.current.focus();\n        }}>Say it again</button>}\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          if (answer.trim().length === 0 || !counting) {\n            return;\n          }\n          setSubmitted(true);\n          console.log('answer', answer)\n          clearTimeout(timer.current);\n          setCounting(false);\n          setTime(0);\n          setTotalAnswered(totalAnswered + 1);\n          if (checkAnswer()) {\n            setCorrectAnswered(correctAnswered + 1);\n          }\n          setTimeout(() => {\n            newWordButton.current.focus();\n          }, 50)\n        }}>\n          <input ref={textBox} type=\"text\" value={answer} onChange={(e) => setAnswer(e.target.value)} />\n          <button disabled={submitted} type=\"submit\">OK</button>\n        </form>\n        <div className=\"feedback\">\n          <div className={checkAnswer() ? 'right' : 'wrong'}>{submitted && (checkAnswer() ? 'good job' : 'oops! here\\'s the correct spelling:')}</div>\n          <div>{submitted && !checkAnswer() && word}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}