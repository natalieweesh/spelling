{"version":3,"sources":["sounds/correct.mp3","sounds/incorrect.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","timer","useRef","textBox","newWordButton","newCorrectSound","useState","answer","setAnswer","submitted","setSubmitted","time","setTime","word","setWord","counting","setCounting","timesUp","setTimesUp","totalAnswered","setTotalAnswered","correctAnswered","setCorrectAnswered","skipped","setSkipped","useEffect","current","Audio","play","speak","words","timeout","setTimeout","isChrome","test","navigator","userAgent","vendor","window","responsiveVoice","generateWord","rand","Math","floor","random","console","log","pause","currentTime","checkAnswer","trim","toLowerCase","clearTimeout","src","correct","incorrect","focus","className","ref","disabled","onClick","e","onSubmit","preventDefault","length","type","value","onChange","target","autocomplete","autocorrect","autocapitalize","spellcheck","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.231a4289.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correct.cd69a88f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/incorrect.6fc72bdb.mp3\";","import React, { useEffect, useRef, useState } from 'react';\nimport words from './words/words.json';\nimport correct from './sounds/correct.mp3';\nimport incorrect from './sounds/incorrect.mp3';\nimport './App.css';\n\nconst TOTAL = 178691;\n\nfunction App() {\n  const timer = useRef(null);\n  const textBox = useRef(null);\n  // const correctSound = useRef(null);\n  // const incorrectSound = useRef(null);\n  const newWordButton = useRef(null);\n  const newCorrectSound = useRef(null);\n  const [answer, setAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [time, setTime] = useState(0);\n  const [word, setWord] = useState('');\n  const [counting, setCounting] = useState(false);\n  const [timesUp, setTimesUp] = useState(false);\n  const [totalAnswered, setTotalAnswered] = useState(0);\n  const [correctAnswered, setCorrectAnswered] = useState(0);\n  const [skipped, setSkipped] = useState(0);\n\n  useEffect(() => {\n    newCorrectSound.current = new Audio();\n    newCorrectSound.current.play();\n  }, [])\n  const speak = (words, timeout = 0) => {\n    setTimeout(() => {\n      const isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\n      window.responsiveVoice.speak(words, isChrome ? \"UK English Female\" : \"US English Female\")\n    }, timeout)\n  }\n\n  const generateWord = () => {\n    const rand = Math.floor(Math.random() * TOTAL);\n    const word = words[rand];\n    setWord(word);\n    console.log('word', word);\n    setTime(30);\n    // setTime(5);\n    setCounting(true);\n    newCorrectSound.current.pause();\n    newCorrectSound.current.currentTime = 0;\n    // correctSound.current.pause();\n    // correctSound.current.currentTime = 0;\n    // incorrectSound.current.pause();\n    // incorrectSound.current.currentTime = 0;\n    setTimeout(() => {\n      speak(word)\n    }, 50)\n  }\n\n  const checkAnswer = () => {\n    const correct = answer.trim().toLowerCase() === word;\n    return correct;\n  }\n\n  useEffect(() => {\n    if (counting) {\n      if (time === 0) {\n        setCounting(false);\n        clearTimeout(timer.current);\n        setTime(0);\n        setSubmitted(true);\n        setTimesUp(true);\n        setTotalAnswered(totalAnswered + 1);\n        if (checkAnswer()) {\n          // correctSound.current.play();\n          setCorrectAnswered(correctAnswered + 1);\n          newCorrectSound.current.src = correct;\n          newCorrectSound.current.play();\n        } else {\n          // incorrectSound.current.play();\n          newCorrectSound.current.src = incorrect;\n          newCorrectSound.current.play();\n        }\n        setTimeout(() => {\n          newWordButton.current.focus();\n        }, 50)\n      } else {\n        timer.current = setTimeout(() => {\n          setTime(time - 1);\n        }, 1000)\n      }\n    }\n  }, [time, counting])\n\n  return (\n    <div className=\"App-header\">\n      <header>\n        <p className=\"title\">Spelling Bee Practice!</p>\n        <p className=\"score\">Your score: {correctAnswered} / {totalAnswered}</p>\n        <p className=\"score\">Words skipped: {skipped}</p>\n      </header>\n      <div className=\"main\">\n        <div className=\"timerow\">\n          <div className=\"timesup\">{timesUp && 'time\\'s up'}</div>\n          {counting && <div className=\"time\">{time}</div>}\n        </div>\n        {!counting && <button ref={newWordButton} disabled={counting} onClick={(e) => {\n          generateWord();\n          setSubmitted(false);\n          setTimesUp(false);\n          setAnswer('');\n          textBox.current.focus();\n        }}>Gimme a word!</button>}\n        {counting && <button onClick={() => {\n          speak(word);\n          textBox.current.focus();\n        }}>Say it again</button>}\n        <form onSubmit={(e) => {\n          e.preventDefault();\n          if (answer.trim().length === 0 || !counting) {\n            return;\n          }\n          setSubmitted(true);\n          console.log('answer', answer)\n          clearTimeout(timer.current);\n          setCounting(false);\n          setTime(0);\n          setTotalAnswered(totalAnswered + 1);\n          if (checkAnswer()) {\n            // correctSound.current.play();\n            setCorrectAnswered(correctAnswered + 1);\n            newCorrectSound.current.src = correct;\n            newCorrectSound.current.play();\n          } else {\n            // incorrectSound.current.play();\n            newCorrectSound.current.src = incorrect;\n            newCorrectSound.current.play();\n          }\n          setTimeout(() => {\n            newWordButton.current.focus();\n          }, 50)\n        }}>\n          <input ref={textBox} type=\"text\" value={answer} onChange={(e) => setAnswer(e.target.value)} autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\"/>\n          <button disabled={submitted} type=\"submit\">OK</button>\n        </form>\n        <div className=\"feedback\">\n          {counting && <button onClick={() => {\n            setSubmitted(true);\n            console.log('answer', answer)\n            clearTimeout(timer.current);\n            setCounting(false);\n            setTime(0);\n            generateWord();\n            setSubmitted(false);\n            setTimesUp(false);\n            setAnswer('');\n            setSkipped(skipped + 1);\n            textBox.current.focus();\n          }}>Skip word</button>}\n          <div className={checkAnswer() ? 'right' : 'wrong'}>{submitted && (checkAnswer() ? 'good job' : 'oops! here\\'s the correct spelling:')}</div>\n          <div>{submitted && !checkAnswer() && word}</div>\n          <div className=\"audio\">\n          {/* <audio controls ref={correctSound}>\n            <source src={correct} type=\"audio/mpeg\"/>\n          </audio>\n          <audio controls ref={incorrectSound}>\n            <source src={incorrect} type=\"audio/mpeg\"/>\n          </audio> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}